{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"cellView":"form","colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"nbkiOsatQCeu"},"outputs":[{"name":"stdout","output_type":"stream","text":["Collecting pyrogram\n","  Downloading Pyrogram-2.0.106-py3-none-any.whl.metadata (4.4 kB)\n","Collecting tgcrypto\n","  Downloading TgCrypto-1.2.5-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.1 kB)\n","Collecting pyaes==1.6.1 (from pyrogram)\n","  Downloading pyaes-1.6.1.tar.gz (28 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: pysocks==1.7.1 in /usr/local/lib/python3.10/dist-packages (from pyrogram) (1.7.1)\n","Downloading Pyrogram-2.0.106-py3-none-any.whl (3.6 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.6/3.6 MB\u001b[0m \u001b[31m32.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading TgCrypto-1.2.5-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (59 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m59.9/59.9 kB\u001b[0m \u001b[31m3.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hBuilding wheels for collected packages: pyaes\n","  Building wheel for pyaes (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pyaes: filename=pyaes-1.6.1-py3-none-any.whl size=26346 sha256=3670a93f4c75872cf145666d7d9a3f67f7dd9af184b5785fc650e320e20d39a8\n","  Stored in directory: /root/.cache/pip/wheels/d6/84/5f/ea6aef85a93c7e1922486369874f4740a5642d261e09c59140\n","Successfully built pyaes\n","Installing collected packages: pyaes, tgcrypto, pyrogram\n","Successfully installed pyaes-1.6.1 pyrogram-2.0.106 tgcrypto-1.2.5\n","Collecting ffmpeg-python\n","  Downloading ffmpeg_python-0.2.0-py3-none-any.whl.metadata (1.7 kB)\n","Requirement already satisfied: future in /usr/local/lib/python3.10/dist-packages (from ffmpeg-python) (1.0.0)\n","Downloading ffmpeg_python-0.2.0-py3-none-any.whl (25 kB)\n","Installing collected packages: ffmpeg-python\n","Successfully installed ffmpeg-python-0.2.0\n","Reading package lists... Done\n","Building dependency tree... Done\n","Reading state information... Done\n","ffmpeg is already the newest version (7:4.4.2-0ubuntu0.22.04.1).\n","0 upgraded, 0 newly installed, 0 to remove and 49 not upgraded.\n","Requirement already satisfied: nest_asyncio in /usr/local/lib/python3.10/dist-packages (1.6.0)\n","Requirement already satisfied: psutil in /usr/local/lib/python3.10/dist-packages (5.9.5)\n","✅•𝐁𝐎𝐓 𝐂𝐎𝐍𝐄𝐂𝐓𝐀𝐃𝐎 𝐄𝐗𝐈𝐓𝐎𝐒𝐀𝐌𝐄𝐍𝐓𝐄•✅\n","Descarga completada. Iniciando la compresión del video...\n","\n","Compresión completada en 2316.02 segundos.\n"]},{"name":"stderr","output_type":"stream","text":["WARNING:pyrogram.session.session:[video_compressor_bot] Waiting for 2 seconds before continuing (required by \"upload.SaveBigFilePart\")\n","WARNING:pyrogram.session.session:[video_compressor_bot] Waiting for 2 seconds before continuing (required by \"upload.SaveBigFilePart\")\n","WARNING:pyrogram.session.session:[video_compressor_bot] Waiting for 2 seconds before continuing (required by \"upload.SaveBigFilePart\")\n","WARNING:pyrogram.session.session:[video_compressor_bot] Waiting for 2 seconds before continuing (required by \"upload.SaveBigFilePart\")\n"]},{"name":"stdout","output_type":"stream","text":["Descarga completada. Iniciando la compresión del video...\n","\n","Compresión completada en 3628.69 segundos.\n","Descarga completada. Iniciando la compresión del video...\n","\n","Compresión completada en 3948.20 segundos.\n"]}],"source":["# @title\n","\n","# Paso 1: Instalación de las bibliotecas necesarias\n","!pip install pyrogram tgcrypto\n","!pip install ffmpeg-python\n","!apt-get install ffmpeg\n","!pip install nest_asyncio\n","!pip install psutil\n","\n","# Paso 2: Importar bibliotecas necesarias\n","import os\n","import ffmpeg\n","from pyrogram.types import Message\n","import nest_asyncio\n","import asyncio\n","from pyrogram import Client, filters\n","import psutil\n","import time\n","import sys\n","import re\n","import threading\n","from pyrogram import Client\n","\n","nest_asyncio.apply()\n","\n","# Paso 3: Definir tu API ID y Hash\n","API_ID = '27047123'  # Reemplaza con tu api_id\n","API_HASH = '0433bb3ec4789fcd09cbd3ea11672cd0'  # Reemplaza con tu api_hash\n","BOT_TOKEN = '7598527396:AAEBWs6B9qhlBhSJ8tDWPJRGoyycVSfluQk'\n","\n","\n","# Paso 4: Crear una instancia del bot\n","app = Client(\"video_compressor_bot\", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)\n","\n","\n","# Paso 5: Definir una función para mostrar la barra de progreso\n","async def mostrar_barra_progreso(client, chat_id, completado, total, velocidad, peso_original, peso_comprimido, last_message_id=None):\n","    porcentaje = min(completado / total * 100, 100)\n","    num_barras = int(porcentaje / 10)  # 10 barras de progreso\n","    barra = '■ ' * num_barras + ' ▣' * (10 - num_barras)\n","\n","    message_text = (f\"╔𓊈{barra}𓊉 {porcentaje:.2f}%\\n\"\n","                    f\"╠➤𝗩𝗲𝗹𝗼𝗰𝗶𝗱𝗮𝗱: {velocidad:.2f} kbs\\n\"\n","                    f\"╠➤𝗣𝗲𝘀𝗼 𝗼𝗿𝗶𝗴𝗶𝗻𝗮𝗹: {peso_original:.2f} MB\\n\"\n","                    f\"╚➤𝗣𝗲𝘀𝗼 𝗰𝗼𝗺𝗽𝗿𝗶𝗺𝗶𝗱𝗼: {peso_comprimido:.2f} MB\")\n","\n","    current_time = time.time()\n","\n","    if last_message_id is None:\n","        # Enviar el primer mensaje de progreso\n","        message = await client.send_message(chat_id=chat_id, text=message_text)\n","        return message.id\n","    else:\n","        # Actualizar el mensaje existente solo si ha pasado un minuto\n","        if current_time - mostrar_barra_progreso.last_update \u003e= 30:  # 60 segundos\n","            await client.edit_message_text(chat_id=chat_id, message_id=last_message_id, text=message_text)\n","            mostrar_barra_progreso.last_update = current_time\n","\n","        # Regresar el last_message_id para poder usarlo en futuras actualizaciones\n","        return last_message_id\n","\n","# Inicializar la variable de última actualización\n","mostrar_barra_progreso.last_update = time.time()\n","\n","async def comprimir_video(client, archivo_entrada, chat_id):  # Añadir client como parámetro\n","    nombre_original = os.path.basename(archivo_entrada).replace('.mp4', '')\n","    nombre_salida = f\"{nombre_original}_@Anzel_Tech.mkv\"\n","\n","    if not os.path.exists(archivo_entrada):\n","        print(\"El video no se descargó correctamente.\")\n","        return None\n","\n","    peso_original = os.path.getsize(archivo_entrada) / (1024 * 1024)  # En MB\n","    total_frames = 0\n","\n","    probe = ffmpeg.probe(archivo_entrada)\n","    for stream in probe['streams']:\n","        if stream['codec_type'] == 'video':\n","            total_frames = int(stream['nb_frames'])\n","            break\n","\n","    start_time = time.time()\n","    process = (ffmpeg\n","        .input(archivo_entrada)\n","        .output(nombre_salida, vf=\"scale=786x432,fps=30\", crf=23, vcodec='libx264', audio_bitrate='64k', preset='veryfast')\n","        .overwrite_output()\n","        .global_args('-progress', 'pipe:1', '-nostats')\n","        .run_async(pipe_stdout=True, pipe_stderr=True)\n","    )\n","\n","    frames_procesados = 0\n","    last_message_id = None\n","\n","    while True:\n","        output = process.stdout.readline()\n","        if output == b\"\" and process.poll() is not None:\n","            break\n","        if output:\n","            match = re.search(r'frame=\\s*(\\d+)', output.decode())\n","            if match:\n","                frames_procesados = int(match.group(1))\n","                peso_comprimido = os.path.getsize(nombre_salida) / (1024 * 1024)\n","                tiempo_transcurrido = time.time() - start_time\n","                if tiempo_transcurrido \u003e 0:  # Asegurarse de que no sea cero\n","                    velocidad_kbps = (os.path.getsize(nombre_salida) / 1024) / tiempo_transcurrido\n","                    last_message_id = await mostrar_barra_progreso(client, chat_id, frames_procesados, total_frames, velocidad_kbps, peso_original, peso_comprimido, last_message_id)\n","\n","    process.wait()\n","    total_time = time.time() - start_time\n","    print(f\"\\nCompresión completada en {total_time:.2f} segundos.\")\n","\n","    # Eliminar el mensaje de progreso una vez que la compresión ha terminado\n","    if last_message_id is not None:\n","        await client.delete_messages(chat_id=chat_id, message_ids=[last_message_id])\n","\n","    return nombre_salida\n","\n","@app.on_message(filters.video)\n","async def handle_video(client, message: Message):\n","    progress_message = await client.send_message(chat_id=message.chat.id, text=\"📥•𝐃𝐄𝐒𝐂𝐀𝐑𝐆𝐀𝐍𝐃𝐎 𝐕𝐈𝐃𝐄𝐎•📥\")\n","\n","    start_time = time.time()\n","    video_path = await message.download()\n","    await client.edit_message_text(chat_id=message.chat.id, message_id=progress_message.id, text=\"⚙️•𝐂𝐎𝐌𝐏𝐑𝐄𝐒𝐈𝐎𝐍 𝐄𝐍 𝐏𝐑𝐎𝐂𝐄𝐒𝐎•⚙️\")\n","\n","    original_size = os.path.getsize(video_path)\n","\n","    print(\"Descarga completada. Iniciando la compresión del video...\")\n","    video_comprimido = await comprimir_video(client, video_path, message.chat.id)  # Pasar client\n","    if video_comprimido is None:\n","        print(\"No se pudo comprimir el video.\")\n","        await client.send_message(chat_id=message.chat.id, text=\"❌ No se pudo comprimir el video.\")\n","        await client.delete_messages(chat_id=message.chat.id, message_ids=[progress_message.id])\n","        return\n","\n","    compressed_size = os.path.getsize(video_comprimido)\n","    elapsed_time = time.time() - start_time\n","\n","\n","    # Mensaje final con resultados\n","    resultado_text = (f\"✅¡𝗖𝗢𝗠𝗣𝗥𝗘𝗦𝗜𝗢𝗡 𝗘𝗫𝗜𝗧𝗢𝗦𝗔!✅\\n\\n\"\n","                      f\"╔➤Tiempo Total: {elapsed_time:.2f} segundos\\n\"\n","                      f\"╠➤Tamaño Original: {original_size / (1024 * 1024):.2f} MB\\n\"\n","                      f\"╚➤Tamaño Comprimido: {compressed_size / (1024 * 1024):.2f} MB\\n\\n\"\n","                      f\"¡𝗖𝗢𝗠𝗣𝗥𝗘𝗦𝗦𝗘𝗗 𝗕𝗬! ➤ Anzel_Tech\")\n","\n","    # Enviar el video comprimido y el mensaje de resultado en un solo envío\n","    await client.send_document(chat_id=message.chat.id, document=video_comprimido, caption=resultado_text)\n","\n","    await client.delete_messages(chat_id=message.chat.id, message_ids=[progress_message.id])  # Eliminar el mensaje de progreso\n","\n","    # Limpiar archivos temporales\n","    os.remove(video_path)\n","    os.remove(video_comprimido)\n","\n","@app.on_message(filters.command(\"start\"))\n","async def start(client, message):\n","    await message.reply(\"¡Hola! Soy un bot para comprimir videos. Por favor, envíame un video para comenzar.\")\n","\n","# Paso 8: Función principal para iniciar el bot\n","async def main():\n","    async with app:\n","        print(\"✅•𝐁𝐎𝐓 𝐂𝐎𝐍𝐄𝐂𝐓𝐀𝐃𝐎 𝐄𝐗𝐈𝐓𝐎𝐒𝐀𝐌𝐄𝐍𝐓𝐄•✅\")\n","        await asyncio.sleep(float(\"inf\"))  # Esto mantiene el bot ejecutándose\n","\n","# Ejecutar la función principal\n","if __name__ == \"__main__\":\n","    try:\n","        asyncio.run(main())\n","    except KeyboardInterrupt:\n","        print(\"El programa se detuvo de forma segura.\")"]}],"metadata":{"colab":{"authorship_tag":"ABX9TyN3QBC+IYvI9WPCBd3z5tN3","name":"","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}