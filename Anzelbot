# @title

# Paso 1: Instalación de las bibliotecas necesarias
!pip install pyrogram tgcrypto
!pip install ffmpeg-python
!apt-get install ffmpeg
!pip install nest_asyncio
!pip install psutil

# Paso 2: Importar bibliotecas necesarias
import os
import ffmpeg
from pyrogram.types import Message
import nest_asyncio
import asyncio
from pyrogram import Client, filters
import psutil
import time
import sys
import re
import threading
from pyrogram import Client

nest_asyncio.apply()

# Paso 3: Definir tu API ID y Hash
API_ID = '27047123'  # Reemplaza con tu api_id
API_HASH = '0433bb3ec4789fcd09cbd3ea11672cd0'  # Reemplaza con tu api_hash
BOT_TOKEN = '7598527396:AAEBWs6B9qhlBhSJ8tDWPJRGoyycVSfluQk'


# Paso 4: Crear una instancia del bot
app = Client("video_compressor_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)


# Paso 5: Definir una función para mostrar la barra de progreso
async def mostrar_barra_progreso(client, chat_id, completado, total, velocidad, peso_original, peso_comprimido, last_message_id=None):
    porcentaje = min(completado / total * 100, 100)
    num_barras = int(porcentaje / 10)  # 10 barras de progreso
    barra = '■ ' * num_barras + ' ▣' * (10 - num_barras)

    message_text = (f"╔𓊈{barra}𓊉 {porcentaje:.2f}%\n"
                    f"╠➤𝗩𝗲𝗹𝗼𝗰𝗶𝗱𝗮𝗱: {velocidad:.2f} kbs\n"
                    f"╠➤𝗣𝗲𝘀𝗼 𝗼𝗿𝗶𝗴𝗶𝗻𝗮𝗹: {peso_original:.2f} MB\n"
                    f"╚➤𝗣𝗲𝘀𝗼 𝗰𝗼𝗺𝗽𝗿𝗶𝗺𝗶𝗱𝗼: {peso_comprimido:.2f} MB")

    current_time = time.time()

    if last_message_id is None:
        # Enviar el primer mensaje de progreso
        message = await client.send_message(chat_id=chat_id, text=message_text)
        return message.id
    else:
        # Actualizar el mensaje existente solo si ha pasado un minuto
        if current_time - mostrar_barra_progreso.last_update >= 30:  # 60 segundos
            await client.edit_message_text(chat_id=chat_id, message_id=last_message_id, text=message_text)
            mostrar_barra_progreso.last_update = current_time

        # Regresar el last_message_id para poder usarlo en futuras actualizaciones
        return last_message_id

# Inicializar la variable de última actualización
mostrar_barra_progreso.last_update = time.time()

async def comprimir_video(client, archivo_entrada, chat_id):  # Añadir client como parámetro
    nombre_original = os.path.basename(archivo_entrada).replace('.mp4', '')
    nombre_salida = f"{nombre_original}_@Anzel_Tech.mkv"

    if not os.path.exists(archivo_entrada):
        print("El video no se descargó correctamente.")
        return None

    peso_original = os.path.getsize(archivo_entrada) / (1024 * 1024)  # En MB
    total_frames = 0

    probe = ffmpeg.probe(archivo_entrada)
    for stream in probe['streams']:
        if stream['codec_type'] == 'video':
            total_frames = int(stream['nb_frames'])
            break

    start_time = time.time()
    process = (ffmpeg
        .input(archivo_entrada)
        .output(nombre_salida, vf="scale=786x432,fps=30", crf=23, vcodec='libx264', audio_bitrate='64k', preset='veryfast')
        .overwrite_output()
        .global_args('-progress', 'pipe:1', '-nostats')
        .run_async(pipe_stdout=True, pipe_stderr=True)
    )

    frames_procesados = 0
    last_message_id = None

    while True:
        output = process.stdout.readline()
        if output == b"" and process.poll() is not None:
            break
        if output:
            match = re.search(r'frame=\s*(\d+)', output.decode())
            if match:
                frames_procesados = int(match.group(1))
                peso_comprimido = os.path.getsize(nombre_salida) / (1024 * 1024)
                tiempo_transcurrido = time.time() - start_time
                if tiempo_transcurrido > 0:  # Asegurarse de que no sea cero
                    velocidad_kbps = (os.path.getsize(nombre_salida) / 1024) / tiempo_transcurrido
                    last_message_id = await mostrar_barra_progreso(client, chat_id, frames_procesados, total_frames, velocidad_kbps, peso_original, peso_comprimido, last_message_id)

    process.wait()
    total_time = time.time() - start_time
    print(f"\nCompresión completada en {total_time:.2f} segundos.")

    # Eliminar el mensaje de progreso una vez que la compresión ha terminado
    if last_message_id is not None:
        await client.delete_messages(chat_id=chat_id, message_ids=[last_message_id])

    return nombre_salida

@app.on_message(filters.video)
async def handle_video(client, message: Message):
    progress_message = await client.send_message(chat_id=message.chat.id, text="📥•𝐃𝐄𝐒𝐂𝐀𝐑𝐆𝐀𝐍𝐃𝐎 𝐕𝐈𝐃𝐄𝐎•📥")

    start_time = time.time()
    video_path = await message.download()
    await client.edit_message_text(chat_id=message.chat.id, message_id=progress_message.id, text="⚙️•𝐂𝐎𝐌𝐏𝐑𝐄𝐒𝐈𝐎𝐍 𝐄𝐍 𝐏𝐑𝐎𝐂𝐄𝐒𝐎•⚙️")

    original_size = os.path.getsize(video_path)

    print("Descarga completada. Iniciando la compresión del video...")
    video_comprimido = await comprimir_video(client, video_path, message.chat.id)  # Pasar client
    if video_comprimido is None:
        print("No se pudo comprimir el video.")
        await client.send_message(chat_id=message.chat.id, text="❌ No se pudo comprimir el video.")
        await client.delete_messages(chat_id=message.chat.id, message_ids=[progress_message.id])
        return

    compressed_size = os.path.getsize(video_comprimido)
    elapsed_time = time.time() - start_time


    # Mensaje final con resultados
    resultado_text = (f"✅¡𝗖𝗢𝗠𝗣𝗥𝗘𝗦𝗜𝗢𝗡 𝗘𝗫𝗜𝗧𝗢𝗦𝗔!✅\n\n"
                      f"╔➤Tiempo Total: {elapsed_time:.2f} segundos\n"
                      f"╠➤Tamaño Original: {original_size / (1024 * 1024):.2f} MB\n"
                      f"╚➤Tamaño Comprimido: {compressed_size / (1024 * 1024):.2f} MB\n\n"
                      f"¡𝗖𝗢𝗠𝗣𝗥𝗘𝗦𝗦𝗘𝗗 𝗕𝗬! ➤ Anzel_Tech")

    # Enviar el video comprimido y el mensaje de resultado en un solo envío
    await client.send_document(chat_id=message.chat.id, document=video_comprimido, caption=resultado_text)

    await client.delete_messages(chat_id=message.chat.id, message_ids=[progress_message.id])  # Eliminar el mensaje de progreso

    # Limpiar archivos temporales
    os.remove(video_path)
    os.remove(video_comprimido)

@app.on_message(filters.command("start"))
async def start(client, message):
    await message.reply("¡Hola! Soy un bot para comprimir videos. Por favor, envíame un video para comenzar.")

# Paso 8: Función principal para iniciar el bot
async def main():
    async with app:
        print("✅•𝐁𝐎𝐓 𝐂𝐎𝐍𝐄𝐂𝐓𝐀𝐃𝐎 𝐄𝐗𝐈𝐓𝐎𝐒𝐀𝐌𝐄𝐍𝐓𝐄•✅")
        await asyncio.sleep(float("inf"))  # Esto mantiene el bot ejecutándose

# Ejecutar la función principal
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("El programa se detuvo de forma segura.")
